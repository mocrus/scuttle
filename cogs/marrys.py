import datetime
import random
import aiohttp
import disnake
from disnake.ext import commands
from cogs.db import collection_marrys, collection


class MarryAssept(disnake.ui.View):
    def __init__(self, author: disnake.Member = None, member: disnake.Member = None):
        super().__init__()
        self.author = author
        self.member = member

    #create button
    @disnake.ui.button(label="–ü–æ–≥–æ–¥–∏—Ç–∏—Å—å", style=disnake.ButtonStyle.success)
    async def agree(self, button: disnake.ui.Button, ctx: disnake.Interaction):
        #check who use
        if ctx.author.id != self.member.id:
            return await ctx.send("–ù–µ –ª—ñ–∑—å —Å–≤–æ—ó–º –Ω–æ—Å–æ–º –≤ —á—É–∂—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", ephemeral=True)
        role = disnake.utils.get(ctx.guild.roles, id=1077027040181633076)
        merry_gifs = [
                        "https://media.tenor.com/K6xMm3nxBg4AAAAM/marriage-marry.gif",
                        "https://media.tenor.com/WCeJaacSAecAAAAS/anime-wedding.gif",
                        "https://media.tenor.com/3OYmSePDSVUAAAAM/black-clover-licht.gif"
                        "https://media.tenor.com/CVLOKUa6PHAAAAAM/anime-wedding.gif"

                    ]

        random_marry_gifs = random.choice(merry_gifs)

        await collection_marrys.insert_one({
            "id1": ctx.author.id,
            "id2": self.author.id,
            "date": datetime.datetime.now(),
            "child": []
        })

        embed = disnake.Embed(
            title=f"–í—ñ—Ç–∞—î–º–æ –∑–∞—Ä—É—á–µ–Ω–∏—Ö –º–æ–ª–æ–¥—è—Ç!",
            description=f"{ctx.author.mention} –æ–±—Ä—É—á–∏–ª–∏—Å—å {self.member.mention} üíò",
            color=disnake.Color.from_rgb(255, 192, 203))
        

        async with aiohttp.ClientSession() as session:
            async with session.get(random_marry_gifs) as resp:
                if resp.status != 200:
                    return await ctx.send('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...')
                embed.set_image(url=random_marry_gifs)
        await ctx.delete_original_response()
        await collection.update_one({"id": self.author.id}, {"$inc": {"balance": -2000}})
        await ctx.author.add_roles(role)
        await self.author.add_roles(role)
        await ctx.send(embed=embed, delete_after=60)

    #create button
    @disnake.ui.button(label="–í—ñ–¥–º–æ–≤–∏—Ç–∏", style=disnake.ButtonStyle.red)
    async def reject(self, button: disnake.ui.Button, ctx: disnake.Interaction):
        #check who use
        if ctx.author.id != self.member.id:
            return await ctx.send("–ù–µ –ª—ñ–∑—å —Å–≤–æ—ó–º –Ω–æ—Å–æ–º –≤ —á—É–∂—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", ephemeral=True)
        emed = disnake.Embed(
            title=f"{ctx.author.name} –≤—ñ–¥–º–æ–≤–∏–≤(–ª–∞) {self.author.name}",
            description="–ü–õ–ê–ß–ï–ú–û –í–°–Ü–Ñ–Æ –ü–û–õ–¢–ê–í–°–¨–ö–û–Æ –û–ë–õ–ê–°–¢–Æ, –ö–†–Ü–ú –ö–†–ï–ú–ï–ù–ß–£–ö–ì–ê"
        )
        await ctx.delete_original_response()
        await ctx.send(embed=emed, delete_after=60)




class MarryCog(commands.Cog):
    def __init__(self, bot) -> None:
        self.bot = bot
    

    @commands.slash_command()
    async def marry(self, ctx, member: disnake.Member = None):
        #get user balance
        get_balnce = await collection.find_one({"id": ctx.author.id})
        #check member needs
        if member is None:
            return await ctx.send("–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ –∫–æ–º—É —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é")
        elif member.id == ctx.author.id:
            return await ctx.send("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Å–æ–±—ñ")
        elif ctx.author.get_role(1077027040181633076) is not None:
            return await ctx.send("–¢–∏ —à–æ —ó–±–∞–Ω—É–≤—Å—è, —Ç–∏ –≤–∂–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π(–∞)")
        elif member.get_role(1077027040181633076) is not None:
            return await ctx.send("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –æ–¥—Ä—É–∂–µ–Ω–∏–π")
        elif get_balnce['balance'] < 2000:
            return await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —â–æ–± –ø–æ–¥–∞—Ç–∏ –†–ê–ì–°")
        embed = disnake.Embed(
            title=f"–£ –≤–∞—Å —î `1 —Ö–≤–∏–ª–∏–Ω–∞` —â–æ–± –ø—Ä–∏–π–Ω—è—Ç–∏ —á–∏ –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é!",
            description=f"{ctx.author.mention} –∑—Ä–æ–±–∏–≤ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é {member.mention} üíô",
            colour = disnake.Colour.from_rgb(255, 192, 203))  # –∫–æ–¥ –∫–æ–ª—å–æ—Ä—É —Ä–æ–∂–µ–≤–æ—ó –ø–æ–ª–æ—Å–∫–∏
            

        marry_gifs = [
                        "https://media.tenor.com/kK8gAeHtSPMAAAAC/marry-me.gif",
                        "https://media.tenor.com/uC3f95FIgogAAAAS/proposal-ring-for-real-the-story-of-reality-tv.gif",
                        "https://media.tenor.com/u7B_BCacat8AAAAM/wedding-ring-engaged.gif",
                        "https://media.tenor.com/R4EeoV4R-kUAAAAM/spy-x-family-loid-forger.gif",
                        "https://media.tenor.com/JdIwiQaoch8AAAAM/i-love-you-baby.gif"
                    ]

        random_marry_gifs = random.choice(marry_gifs)

        async with aiohttp.ClientSession() as session:
            async with session.get(random_marry_gifs) as resp:
                if resp.status != 200:
                    return await ctx.send('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...')
                embed.set_image(url=random_marry_gifs)
        
        await ctx.send(f"{member.mention} –≤–∞–º –∑—Ä–æ–±–∏–ª –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é", delete_after=60)
        await ctx.send(embed=embed, delete_after=60,  view=MarryAssept(author=ctx.author, member=member))



def setup(bot):
    bot.add_cog(MarryCog(bot))